Here's a Japanese translation of the pseudocode. I've aimed for a blend of technical accuracy and readability. Please note: Due to the complexities of natural language translation, especially between English and Japanese, this translation may require some refinements for perfect fluency in real-world use.

**Important Considerations**

* **Kanji Encoding:** I'm assuming you want a standard kanji encoding like Shift-JIS or UTF-8. 
* **Technical Terms:**  Some technical terms may not have ideal direct translations. We might retain English terms within the Japanese text (common programming practice) or provide approximate Japanese equivalents with clarifying comments. 

**Translated Pseudocode**

```
# 必要なモジュールのインポート
import serial
import time
import pyudev
import re
import serial.tools.list_ports
import logging
import sys

# serialモジュールのファイルパスを表示
print(serial.__file__)

# システムパスを表示
print(sys.path)

# ロギングの設定
logger = logging.getLogger(__name__) # 現在モジュールの名前でロガー作成
logger.setLevel(logging.DEBUG) # DEBUGレベルに設定

# ファイルハンドラ作成
file_handler = logging.FileHandler('filename.log') # 適宜ファイル名指定
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# コンソールハンドラ作成
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.ERROR) # ERRORレベルに設定
console_handler.setFormatter(formatter)

# 両方のハンドラをロガーに追加
logger.addHandler(file_handler)
logger.addHandler(console_handler)

# 一般的なボーレートのリスト
COMMON_BAUD_RATES = [300, 1200, 2400, 4800, 9600, 19200, 38400, 57600, 115200]

# ヒューリスティックチェック関数
def heuristic_check(data):
    printable_count = sum(c.isprintable() for c in data)  # 印刷可能文字カウント
    return printable_count / len(data) > 0.7  # 70%超でTrue

# ボーレート検出関数
def detect_baud_rate(port):
    for baud_rate in COMMON_BAUD_RATES:
        try:
            with serial.Serial(port, baud_rate) as ser: 
                logger.info(f'通信速度 {baud_rate} を試行中') 
                time.sleep(2)  # データ蓄積のため2秒待機
                data = ser.read() 
                if heuristic_check(data):
                    logger.info(f'一貫性のあるデータ受信、通信速度: {baud_rate}')
                    return baud_rate
        except serial.SerialException as e:
            logger.error(f'例外発生: {e}')
    return None  # 一貫性のあるボーレートが見つからない場合

# Arduinoシリアルポート検出
def find_arduino_serial_ports():
    arduino_ports = []
    devices = list(pyudev.Context().list_devices(subsystem='tty')) # USBシリアル機器
    for port in devices:
        if port.get('ID_VENDOR_ID') and port.get('ID_VENDOR_ID') == "Arduino VID": 
            arduino_ports.append(port['DEVPATH'])  # ArduinoのVIDで判断
    return arduino_ports

# Arduinoからのデータ読み取り
def read_from_arduino(port, baud_rate):
    try:
        with serial.Serial(port, baud_rate) as ser:
            logger.info(f'ポート {port} を開きました')
            while True:
                line = ser.readline().decode('utf-8').strip() 
                if line:
                    logger.debug(f'受信データ: {line}')
    except serial.SerialException as e:
        logger.error(f'例外発生: {e}')
    except KeyboardInterrupt:
        logger.info('読み取りを停止します')

# ... (main_menu関数や、スクリプトの実行条件は原文から変更なしで利用可) 
```

Let me know if you have any specific requests or preferences for translation of technical terms! 
